#!/usr/bin/env python

import os
import sys
import logging
import logging.config
import logging.handlers
from multiprocessing import Process, Queue
from threading import Thread
from pathlib import Path
from smores.smoreslog import MultiProcessingLog

__version__ = '0.0.0'
logger = logging.getLogger(__name__)


def logger_thread(q):
    while True:
        record = q.get()
        if record is None:
            break
        logger = logging.getLogger('multi')
        logger.handle(record)


if __name__ == "__main__":
    if sys.version_info[0] < 3:
        raise RuntimeError("This program requires the Python 3 interpreter")
    else:
        _prj = Path.cwd().parents[0]
        sys.path.append(os.path.join(str(_prj), '..'))
        from smores.smoresCLI import smoresCLI

        _config = _prj.joinpath('smores','config')
        _metapath = _config.joinpath('_metadata.py')
        _logpath = _prj.joinpath('smores','logs')
        _logconfig = _config.joinpath('logging.yaml')
        _meta = {}
        try:
            with _metapath.open() as _metafile:
                exec(_metafile.read(), globals(), _meta)
        except EnvironmentError:
            raise RuntimeError("if %s.py exists, it is required to be well-formed" % (_metapath,))
        else:
            console = logging.getLogger(__name__)
            console.debug('Python version ' + sys.version)
            smoresCLI(_meta).cmdloop()
